input {
    tcp {
        port => 5000
        codec => json_lines
        type => container
    }
    tcp {
        port => 5010
        codec => "json"
        type => linux
    }
    gelf {
        port => 5020
        type => docker
    }
    beats {
        port => 5044
        type => beats
      }
    syslog {
        port => 5144
        syslog_field => "syslog"
        ecs_compatibility => v1
        grok_pattern => "<%{POSINT:syslog_pri}>%{SYSLOGLINE}"
        type => shelf
    }
}

filter {
    if [type] == "shelf" {
        mutate { add_field => { "[@metadata][target_index]" => "shelf-%{+YYYY.MM.dd}" } }
        # SC log template
        ## <11>2023-07-16T19:39:28.062927+04:30 dwdm-42_1_1p monit[409]: 'eth0.25' link data collection failed -- Cannot read /sys/class/net/eth0.25/operstate -- No such file or directory
        mutate { gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", "" ] }
        grok { match => { "message" => "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:syslog_timestamp} %{USERNAME:[host][name]} %{WORD:syslog_program}(?:\[%{INT:syslog_pid}\])?: %{GREEDYDATA:message}" } overwrite => [ "message" ] }
        syslog_pri {
            ecs_compatibility => disabled
            facility_labels => ["kernel", "user-level", "mail", "system", "security/authorization", "syslogd", "line printer", "network news", "UUCP", "clock", "security/authorization", "FTP", "NTP", "log audit", "log alert", "clock", "local0", "local1", "local2", "local3", "local4", "local5", "local6", "SC APP"]
        }
        grok { match => { "message" => "\[%{WORD:syslog_section}\]  %{GREEDYDATA:message}" } overwrite => [ "message" ] }
        grok { match => { "message" => "\(%{USERNAME:[code][file]}:%{USERNAME:[code][func]}:%{INT:[code][line]}\)" "[host][name]" => "(-%{INT:node}_%{INT:rack}_%{INT:shelf})" } }
        mutate { gsub => [ "message", "\(.*\:.*\:.*\)", "" ]
            convert => { 
                "syslog_pri" => "integer"
                "syslog_pid" => "integer"
                }
                remove_field => ["severity", "priority", "facility", "log"]
                remove_tag => ["_grokparsefailure_sysloginput"]
        }
        mutate { convert => {
            "node" => "integer"
            "rack" => "integer"
            "shelf" => "integer"
            }
        }
    } 
    else if [type] == "container" {
        mutate { add_field => { "[@metadata][target_index]" => "container-%{+YYYY.MM.dd}" } }
        grok { match => [ "message", "%{GREEDYDATA}" ] }
    }
    else if [type] == "docker" {
        mutate { add_field => { "[@metadata][target_index]" => "docker-%{+YYYY.MM.dd}" } }
    }
    else if [type] == "linux" {
        mutate { add_field => { "[@metadata][target_index]" => "linux-%{+YYYY.MM.dd}" } }
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
            add_field => [ "received_at", "%{@timestamp}" ]
            add_field => [ "received_from", "%{host}" ]
        }
        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
    }
    else if [type] == "beats" {
        mutate { add_field => { "[@metadata][target_index]" => "beats-%{+YYYY.MM.dd}" } }
    }
    else {
        mutate { add_field => { "[@metadata][target_index]" => "unknown-%{+YYYY.MM.dd}" } }
    }
}

output {
#    stdout {
#        codec => rubydebug {
#            metadata => true
#        }
#    }
    elasticsearch {
        hosts => [ "${ELASTICSEARCH_HOSTS}" ]
        user => "${ELASTICSEARCH_USERNAME}"
        password => "${ELASTICSEARCH_PASSWORD}"
        index => "%{[@metadata][target_index]}"
    }
}
